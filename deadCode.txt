/*
    uint64_t generateRookMoves(uint64_t rookBitboard, uint64_t occupiedSquares){ 
    uint64_t rookMovesBoard = 0ULL;
    for (int sq = 0; sq < 64 ; sq ++){
        if (isSet(rookBitboard,sq)){
            rookMovesBoard |= get_rook_attacks(sq,occupiedSquares);
        }
    }
    return rookMovesBoard;
}
    uint64_t generateBishopMoves(uint64_t bishopBitboard, uint64_t occupiedSquares){
    uint64_t bishopMovesBoard = 0ULL;
    for (int sq = 0; sq < 64 ; sq ++){
        if (isSet(bishopBitboard,sq)){
            bishopMovesBoard |= get_bishop_attacks(sq,occupiedSquares);
        }
    }
    return bishopMovesBoard;
}
    uint64_t generateQueenMoves(uint64_t queenBitboard, uint64_t occupiedSquares){
    uint64_t queenMovesBoard = 0ULL;
    queenMovesBoard = generateBishopMoves(queenBitboard, occupiedSquares) | generateRookMoves(queenBitboard, occupiedSquares);
    
    return queenMovesBoard;
}
    uint64_t generateKnightMoves(uint64_t knightBitBoard){
    /*
        15  17
     6         10
           x
     10         6
        17  15
    */
    
    //seperate board for knight moves and condition checking. If 1 was used, cascading shifting would happen... bad!
   /*
    uint64_t bitboard = knightBitBoard;
    uint64_t knightMoves = 0ULL;

    //prevents leftside overflow
    uint64_t notAFile =   0xFEFEFEFEFEFEFEFEULL;
    uint64_t notABFile =  0xFCFCFCFCFCFCFCFCULL;
    //prevents rightside overflow
    uint64_t notHFile =   0x7F7F7F7F7F7F7F7FULL;
    uint64_t notGHFile =  0x3F3F3F3F3F3F3F3FULL;

    //bitboard is a representation of a number, so if a value is higher or lower than the range of the representation (64 bits), then it will automatically not be shown --> border issues do not matter
    

    
    //checks the mapping before
    
    knightMoves |= (bitboard & notAFile) >> 17;
    knightMoves |= (bitboard & notHFile) >> 15;
    knightMoves |= (bitboard & notABFile) >> 10; 
    knightMoves |= (bitboard & notGHFile) >> 6;
    
    knightMoves |= (bitboard & notHFile) << 17;
    knightMoves |= (bitboard & notAFile) << 15;
    knightMoves |= (bitboard & notGHFile) << 10;
    knightMoves |= (bitboard & notABFile) << 6;
   

    return knightMoves;
}
    */
/* COMMENTING OUT FOR TESTING OF OTHER METHODS!
    uint64_t getRelevantMoveMask(int fromSquare, char pieceType, bool isWhiteTurn ){
        // Completed on 4/7/25
        // returns the relevant map for a given square.
        init_sliders_attacks(1); //for bishops
        init_sliders_attacks(0); //for rooks


        pieceType = tolower(pieceType);
        uint64_t possibleMoves = 0x0000000000000000ULL;

        uint64_t occupiedSquares = getOccupiedSquares();
        uint64_t friendlyOccupiedSquares;
        uint64_t enemyOccupiedSquares;
        if (isWhiteTurn){
            friendlyOccupiedSquares = getWhitePieces();
            enemyOccupiedSquares = getBlackPieces();

        }
        else{
            friendlyOccupiedSquares = getBlackPieces();
            enemyOccupiedSquares = getWhitePieces();
        }

        switch(pieceType){
            //NEED TO DO PAWN AND KING BECAUSE THEIR MOVES DEPEND ON OCCUPIED
            case 'p': //pawn
                possibleMoves = getPawnMask(fromSquare, isWhiteTurn);
                possibleMoves &= ~occupiedSquares; //only keeps possible moves not blocked by existing
                
                uint64_t possibleCaptures = getPawnCaptures(fromSquare, isWhiteTurn);
                possibleCaptures &= enemyOccupiedSquares;

                possibleMoves |= possibleCaptures;
                break;
                
            case 'k': //king
                possibleMoves = getKingMask(fromSquare);
                possibleMoves &= ~friendlyOccupiedSquares;
                break;
            case 'n': //knight
                possibleMoves = getKnightMask(fromSquare);
                possibleMoves &= ~friendlyOccupiedSquares;
                break;
            case 'r': //rook
                possibleMoves = get_rook_attacks(fromSquare, occupiedSquares );
                possibleMoves &= ~friendlyOccupiedSquares; // removes friendly pieces from possible, blocking captures
                break;
            case 'b': //bishop
                possibleMoves = get_bishop_attacks(fromSquare, occupiedSquares );
                possibleMoves &= ~friendlyOccupiedSquares; // removes friendly pieces from possible, blocking captures
                break;
            case 'q': //queen
                possibleMoves = ( getRookMask(fromSquare) | getBishopMask(fromSquare) );  //all possible directional moves
                possibleMoves &= ~friendlyOccupiedSquares;
                break;
            
        }
        return possibleMoves;
    }
    
    //Should be passing bitboard in its entirity instead of a square... logic should be vectorized, removes loops
    uint64_t getPossibleMovesMask(int fromSquare, char pieceType, bool isWhiteTurn){
        init_sliders_attacks(1); //for bishops
        init_sliders_attacks(0); //for rooks

        uint64_t pieceMask = getRelevantMoveMask(fromSquare, pieceType, isWhiteTurn);
        uint64_t friendlyOccupied;
        if (isWhiteTurn) friendlyOccupied = getWhitePieces();
        else{
            friendlyOccupied = getBlackPieces();
        }
        uint64_t possibleMoves = ( pieceMask & (~friendlyOccupied) ); //removes the ability to capture friendly pieces
    }
   
   
   */



   //ARCHIVED KNIGHT CODE

/* This code is naive, first approach at creating bitboard-scale move generation. The power of bitboard is that parallel actions can exist (apply to all at same time)
uint64_t generateKnightMovesBitBoard(uint64_t knightBitBoard, uint64_t occupiedSquares){
    uint64_t knightMovesBoard = 0ULL;
    for (int sq = 0; sq < 64 ; sq ++){
        if (isSet(knightBitBoard,sq)){
            knightMovesBoard |= getKnightMask(sq);
        }
    }
    return knightMovesBoard;
}

  //This code is bad because it checks the mapping AFTER shifting... you want to prevent bad moves BEFORe they happen!
   //if ( (bitboard >> 17) & (notHFile) ) knightMoves |= (bitboard >> 17);
   //if ( (bitboard >> 15) & (notAFile) ) knightMoves |= (bitboard >> 15);
   //if ( (bitboard >> 10) & (notGHFile) ) knightMoves |= (bitboard >> 10);
   //if ( (bitboard >> 6)  & (notABFile) ) knightMoves |= (bitboard >> 6);
   
   //if ( (bitboard << 17) & (notAFile) ) knightMoves |= (bitboard << 17);
   //if ( (bitboard << 15) & (notHFile) ) knightMoves |= (bitboard << 15);
   //if ( (bitboard << 10) & (notABFile) ) knightMoves |= (bitboard << 10);
   //if ( (bitboard << 6)  & (notGHFile) ) knightMoves |= (bitboard << 6);
*/



// ARCHIVED ROOK MOVE GEN, NO BLOCKS, SQUARE BASED


/*int fromSquare = square;

    This is older code. I did not like how the while loop was too abstract and very long code
        After looking at chess programming youtube, his for loops were superior. decided to switch to this
    uint64_t rightBorder = 0x8080808080808080ULL;
    uint64_t leftBorder =  0x0101010101010101ULL;
    uint64_t topBorder =   0xFF00000000000000ULL;
    uint64_t botBorder =   0x00000000000000FFULL;

        uint64_t rookAttacks = 0x0ULL;
        uint64_t leftPossibleMoves = 0x0ULL;
        uint64_t rightPossibleMoves = 0x0ULL;
        uint64_t upPossibleMoves = 0x0ULL;
        uint64_t downPossibleMoves = 0x0ULL;
        // need to capture | and -- moves, before interuption
       
        // step 1 is to map all theoretical moves (before blockage)
        uint64_t spotOfInterest = 1ULL << fromSquare; // 000010000
        while ((spotOfInterest & rightBorder) == 0) 
        { // while this square is not on the border
            rightPossibleMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 1); //shift right 
            std::cout <<"RIGHT: " << rightPossibleMoves << std::endl;

           


            if (spotOfInterest & rightBorder){
                rightPossibleMoves |= spotOfInterest;
                break;
            }
        }
            
            
        rookAttacks |= rightPossibleMoves; //add the right possible moves to the master linear possible moves
        //std::cout <<"RIGHT*: " << rightPossibleMoves << std::endl;
        
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & leftBorder) == 0)
        { // while this square is not on the border
            leftPossibleMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 1); //shift right 
            std::cout <<"LEFT: " << leftPossibleMoves << std::endl;

           


            if (spotOfInterest & leftBorder){
                leftPossibleMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"LEFT*: " << leftPossibleMoves << std::endl;
        rookAttacks |= leftPossibleMoves; //add the right possible moves to the master linear possible moves


        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & topBorder) == 0)
        { // while this square is not on the border
            upPossibleMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 8); //shift right 
            //std::cout <<"UP: " << upPossibleMoves << std::endl;

           
            if (spotOfInterest & topBorder){
                upPossibleMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"TOP*: " << upPossibleMoves << std::endl;
        rookAttacks |= upPossibleMoves; //add the right possible moves to the master linear possible moves
            
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & botBorder) == 0) 
        { // while this square is not on the border
            downPossibleMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 8); //shift right 
           // std::cout <<"DOWN: " << downPossibleMoves << std::endl;

            if (spotOfInterest & botBorder){
                downPossibleMoves |= spotOfInterest;
                break;
            }
        }
            
        //std::cout <<"BOT*: " << downPossibleMoves << std::endl;
        rookAttacks |= downPossibleMoves; //add the right possible moves to the master linear possible moves

        rookAttacks = rookAttacks ^ (1ULL << fromSquare);
    */




    //OLD CODE, WAS WRITTEN BEFORE UNDERSTANDING THE STRENGTHS OF BITBOARD

    /*
// I DONT KNOW IF THIS METHOD IS EVEN NEEDED... BOARDS WILL BE PASSED AND IT WILL BE EXPLICIT WHEN DONE... NOT A DYNAMIC CALL
uint64_t getRelevantMoveMask(int fromSquare, char pieceType, Board state ){
    // Completed on 4/7/25
    // returns the relevant map for a given square.
    init_sliders_attacks(1); //for bishops
    init_sliders_attacks(0); //for rooks

    pieceType = tolower(pieceType);
    uint64_t possibleMoves = 0x0000000000000000ULL;

    uint64_t occupiedSquares = state.getOccupiedSquares();
    uint64_t friendlyOccupiedSquares;
    uint64_t enemyOccupiedSquares;
    if (state.isWhiteTurn()){
        friendlyOccupiedSquares = state.getWhitePieces();
        enemyOccupiedSquares = state.getBlackPieces();

    }
    else{
        friendlyOccupiedSquares = state.getBlackPieces();
        enemyOccupiedSquares = state.getWhitePieces();
    }

    switch(pieceType){
        //NEED TO DO PAWN AND KING BECAUSE THEIR MOVES DEPEND ON OCCUPIED
        case 'p': //pawn
            possibleMoves = getPawnMask(fromSquare, state.isWhiteTurn());
            possibleMoves &= ~occupiedSquares; //only keeps possible moves not blocked by existing
            
            uint64_t possibleCaptures = getPawnCaptures(fromSquare, state.isWhiteTurn());
            possibleCaptures &= enemyOccupiedSquares;

            possibleMoves |= possibleCaptures;
            break;
            
        case 'k': //king
            possibleMoves = getKingMask(fromSquare);
            possibleMoves &= ~friendlyOccupiedSquares;
            break;
        case 'n': //knight
            possibleMoves = getKnightMask(fromSquare);
            possibleMoves &= ~friendlyOccupiedSquares;
            break;
        case 'r': //rook
            possibleMoves = get_rook_attacks(fromSquare, occupiedSquares );
            possibleMoves &= ~friendlyOccupiedSquares; // removes friendly pieces from possible, blocking captures
            break;
        case 'b': //bishop
            possibleMoves = get_bishop_attacks(fromSquare, occupiedSquares );
            possibleMoves &= ~friendlyOccupiedSquares; // removes friendly pieces from possible, blocking captures
            break;
        case 'q': //queen
            possibleMoves = ( getRookMask(fromSquare) | getBishopMask(fromSquare) );  //all possible directional moves
            possibleMoves &= ~friendlyOccupiedSquares;
            break;
        
    }
}
*/



 /*
    int fromSquare = square;
    uint64_t rightBorder = 0x8080808080808080ULL;
    uint64_t leftBorder =  0x0101010101010101ULL;
    uint64_t topBorder =   0xFF00000000000000ULL;
    uint64_t botBorder =   0x00000000000000FFULL;

        uint64_t bishopAttacks = 0x0ULL;
        uint64_t northEastMoves = 0x0ULL;
        uint64_t southEastMoves = 0x0ULL;
        uint64_t southWestMoves = 0x0ULL;
        uint64_t NorthWestMoves = 0x0ULL;
        // need to capture | and -- moves, before interuption
       
        // step 1 is to map all theoretical moves (before blockage)
        uint64_t spotOfInterest = 1ULL << fromSquare; // 000010000
        while ((spotOfInterest & (rightBorder | topBorder)) == 0) //NORTHEAST 
        { // while this square is not on the border
            northEastMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 9); //shift up and right (number is larger by 9 digits aka SL)
            //std::cout <<"RIGHT: " << northEastMoves << std::endl;

           


            if (spotOfInterest & (rightBorder | topBorder)){
                northEastMoves |= spotOfInterest;
                break;
            }
        }
            
            
        bishopAttacks |= northEastMoves; //add the right possible moves to the master linear possible moves
        //std::cout <<"RIGHT*: " << rightPossibleMoves << std::endl;
        
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (rightBorder | botBorder)) == 0) //SOUTHEAST
        { // while this square is not on the border
            southEastMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 7); //shift right 
            std::cout <<"LEFT: " << southEastMoves << std::endl;

           


            if (spotOfInterest & (rightBorder | botBorder)){
                southEastMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"LEFT*: " << leftPossibleMoves << std::endl;
        bishopAttacks |= southEastMoves; //add the right possible moves to the master linear possible moves


        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (leftBorder | botBorder)) == 0) //SOUTHWEST
        { // while this square is not on the border
            southWestMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 9); //shift right 
            //std::cout <<"UP: " << upPossibleMoves << std::endl;

           
            if (spotOfInterest & (leftBorder | botBorder)){
                southWestMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"TOP*: " << upPossibleMoves << std::endl;
        bishopAttacks |= southWestMoves; //add the right possible moves to the master linear possible moves
            
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (leftBorder | topBorder)) == 0) 
        { // while this square is not on the border
            NorthWestMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 7); //shift right 
           // std::cout <<"DOWN: " << downPossibleMoves << std::endl;

            if (spotOfInterest & (leftBorder | topBorder)){
                NorthWestMoves |= spotOfInterest;
                break;
            }
        }
            
        //std::cout <<"BOT*: " << downPossibleMoves << std::endl;
        bishopAttacks |= NorthWestMoves; //add the right possible moves to the master linear possible moves

        bishopAttacks = bishopAttacks ^ (1ULL << fromSquare);

        return bishopAttacks;
        */



/*
    int fromSquare = square;
    uint64_t rightBorder = 0x8080808080808080ULL;
    uint64_t leftBorder =  0x0101010101010101ULL;
    uint64_t topBorder =   0xFF00000000000000ULL;
    uint64_t botBorder =   0x00000000000000FFULL;

        uint64_t bishopAttacks = 0x0ULL;
        uint64_t northEastMoves = 0x0ULL;
        uint64_t southEastMoves = 0x0ULL;
        uint64_t southWestMoves = 0x0ULL;
        uint64_t NorthWestMoves = 0x0ULL;
        // need to capture | and -- moves, before interuption
       
        // step 1 is to map all theoretical moves (before blockage)
        uint64_t spotOfInterest = 1ULL << fromSquare; // 000010000
        while ((spotOfInterest & (rightBorder | topBorder)) == 0) //NORTHEAST 
        { // while this square is not on the border
            northEastMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 9); //shift up and right (number is larger by 9 digits aka SL)
            //std::cout <<"RIGHT: " << northEastMoves << std::endl;

           


            if (spotOfInterest & (rightBorder | topBorder)){
                northEastMoves |= spotOfInterest;
                break;
            }
        }
            
            
        bishopAttacks |= northEastMoves; //add the right possible moves to the master linear possible moves
        //std::cout <<"RIGHT*: " << rightPossibleMoves << std::endl;
        
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (rightBorder | botBorder)) == 0) //SOUTHEAST
        { // while this square is not on the border
            southEastMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 7); //shift right 
            std::cout <<"LEFT: " << southEastMoves << std::endl;

           


            if (spotOfInterest & (rightBorder | botBorder)){
                southEastMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"LEFT*: " << leftPossibleMoves << std::endl;
        bishopAttacks |= southEastMoves; //add the right possible moves to the master linear possible moves


        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (leftBorder | botBorder)) == 0) //SOUTHWEST
        { // while this square is not on the border
            southWestMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest >> 9); //shift right 
            //std::cout <<"UP: " << upPossibleMoves << std::endl;

           
            if (spotOfInterest & (leftBorder | botBorder)){
                southWestMoves |= spotOfInterest;
                break;
            }
        }
        //std::cout <<"TOP*: " << upPossibleMoves << std::endl;
        bishopAttacks |= southWestMoves; //add the right possible moves to the master linear possible moves
            
        spotOfInterest = 1ULL << fromSquare;
        while ((spotOfInterest & (leftBorder | topBorder)) == 0) 
        { // while this square is not on the border
            NorthWestMoves |= spotOfInterest; //combine the existing possible moves with the spot of interest mask
            spotOfInterest = (spotOfInterest << 7); //shift right 
           // std::cout <<"DOWN: " << downPossibleMoves << std::endl;

            if (spotOfInterest & (leftBorder | topBorder)){
                NorthWestMoves |= spotOfInterest;
                break;
            }
        }
            
        //std::cout <<"BOT*: " << downPossibleMoves << std::endl;
        bishopAttacks |= NorthWestMoves; //add the right possible moves to the master linear possible moves

        bishopAttacks = bishopAttacks ^ (1ULL << fromSquare);

        return bishopAttacks;
        */
