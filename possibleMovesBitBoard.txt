 uint64_t possiblePawnMovesBitBoard(){ 
      
        uint64_t pawnBitBoard;
        
        if (isWhiteTurn){
            pawnBitBoard = getWhitePawn();
        }
        else{
            pawnBitBoard = getBlackPawn();
        }
    
       uint64_t friendlyPieces = getFriendlyPieces();
       uint64_t enemyPieces = getEnemyPieces();
    
        uint64_t possibleMoves = 0ULL;
        uint64_t possibleCaptures = 0ULL;
    
        if (isWhiteTurn){ // pawns move up.. << & en Passant rank = 4
            uint64_t singlePush = ( pawnBitBoard << 8) & emptySquares ; 
            uint64_t doublePush = ( ( ( (0xFF00 & pawnBitBoard) << 8) & emptySquares ) << 8 ) & emptySquares; //checks for unmoved pawns, single pushes, pushes again
        
            possibleMoves = singlePush | doublePush ;
            
            possibleCaptures |= ( (pawnBitBoard & notHFile) << 9 ) & enemyPieces;
            possibleCaptures |= ( (pawnBitBoard & notAFile )<< 7) & enemyPieces;
            possibleMoves |= possibleCaptures;
            possibleMoves &= ~(friendlyPieces); // may be redundant as possibleCaptures is anded with enemyPieces
        }
        else{ //identical logic, different variable values and shifting operator
            uint64_t singlePush = ( pawnBitBoard >> 8) & emptySquares ; 
            uint64_t doublePush = ( ( ( (0x00FF000000000000ULL & pawnBitBoard) >> 8) & emptySquares ) >> 8 ) & emptySquares; //checks for unmoved pawns, single pushes, pushes again
        
            possibleMoves = singlePush | doublePush ;
            
            possibleCaptures |= ( (pawnBitBoard & notHFile) >> 9 ) & enemyPieces;
            possibleCaptures |= ( (pawnBitBoard & notAFile )>> 7) & enemyPieces;
            possibleMoves |= possibleCaptures;
            possibleMoves &= ~(friendlyPieces);
        }
        return possibleMoves;
    }
    uint64_t possibleKnightMovesBitBoard(){
        /*
            15  17
         6         10
               x
         10         6
            17  15
        
        */
        //seperate board for knight moves and condition checking. If 1 was used, cascading shifting would happen... bad!
        uint64_t knightBitBoard;
        uint64_t friendlyPieces;
        uint64_t enemyPieces;
        if (isWhiteTurn){
            knightBitBoard = getWhiteKnight();
            friendlyPieces = getWhitePieces();
            enemyPieces = getBlackPieces();
        }
        else{
            knightBitBoard = getBlackKnight();
            friendlyPieces = getBlackPieces();
            enemyPieces = getWhitePieces();
        }
        uint64_t bitboard = knightBitBoard;
        uint64_t knightMoves = 0ULL;
    
        //will not change right now because it aint broke... but!
        //I dont need both knightMoves and bitboard. I created these to prevent cascading shifting but by assigning results to an outside/secondary board (knightMoves), cascading is avoided
        knightMoves |= (bitboard & notHFile) << 17;
        knightMoves |= (bitboard & notAFile) << 15;
        knightMoves |= (bitboard & notGHFile) << 10;
        knightMoves |= (bitboard & notABFile) << 6;
        knightMoves |= (bitboard & notAFile) >> 17;
        knightMoves |= (bitboard & notHFile) >> 15; 
        knightMoves |= (bitboard & notABFile) >> 10; 
        knightMoves |= (bitboard & notGHFile) >> 6; 
        knightMoves &= ~friendlyPieces;
        return knightMoves;
    }
    uint64_t possibleBishopMovesBitBoard(){
        uint64_t bishopBitboard = 0ULL;
        if (isWhiteTurn){
            bishopBitboard = getWhiteBishop();
        }
        else{
            bishopBitboard = getBlackBishop();
        }
        uint64_t friendlyPieces;
        uint64_t enemyPieces;
        friendlyPieces = getFriendlyPieces();
        enemyPieces = getEnemyPieces();

        uint64_t bishopMoves = 0ULL;
        for (int square = 0; square < 64; square++){ // for every bishop, calculate the attacks
            if (isSet(bishopBitboard,square)){
                bishopMoves |= get_bishop_attacks(square,getOccupiedSquares() );
            }
        }
        bishopMoves &= ~friendlyPieces;
        return bishopMoves;
    }
    uint64_t possibleRookMovesBitBoard(){
        uint64_t rookBitBoard = 0ULL;
        if (isWhiteTurn){
            rookBitBoard = getWhiteRook();
        }
        else{
            rookBitBoard = getBlackRook();
        }
        uint64_t friendlyPieces;
        uint64_t enemyPieces;
        friendlyPieces = getFriendlyPieces();
        enemyPieces = getEnemyPieces();

        uint64_t rookMoves = 0ULL;
        for (int square = 0; square < 64; square++){ //only if the bit is set, do you calculate rook moves
            if (isSet(rookBitBoard,square)){
                rookMoves |= get_rook_attacks(square,getOccupiedSquares() );
            }
        }
        rookMoves &= ~ friendlyPieces;
        return rookMoves;
    }
    uint64_t possibleQueenMovesBitBoard(){
        uint64_t queenBitBoard = 0ULL;
        
        if (isWhiteTurn){
            queenBitBoard = getWhiteQueen();
        }
        else{
            queenBitBoard = getBlackQueen();
        }
        uint64_t friendlyPieces;
        uint64_t enemyPieces;
        friendlyPieces = getFriendlyPieces();
        enemyPieces = getEnemyPieces();

        uint64_t queenMoves;
        for (int square = 0; square < 64; square++){ 
            if (isSet(queenBitBoard,square)){
                queenMoves |= get_rook_attacks(square,getOccupiedSquares() );
                queenMoves |= get_bishop_attacks(square,getOccupiedSquares() );
            }
        }
        queenMoves &= ~ friendlyPieces;

        return queenMoves;
    }
    uint64_t possibleKingMovesBitBoard(){
        
        uint64_t kingBitBoard;
        if (isWhiteTurn){
            kingBitBoard = getWhiteKing();
            
        }
        else{
            kingBitBoard = getBlackKing();
        }
       
        uint64_t friendlyPieces;
        uint64_t enemyPieces;
        friendlyPieces = getFriendlyPieces();
        enemyPieces = getEnemyPieces();
        /*
           789
           1K1
           987
        */
        uint64_t kingAttack = 0ULL;
        //top
        kingAttack |= (notAFile & kingBitBoard) >> 9;
        kingAttack |= kingBitBoard >> 8;
        kingAttack |= (notAFile & kingBitBoard) >> 7; 
        kingAttack |= (notHFile & kingBitBoard) >> 1;
        //bottom
        kingAttack |= (notHFile & kingBitBoard) << 7;
        kingAttack |= kingBitBoard << 8;
        kingAttack |= (notHFile & kingBitBoard) << 9;
        kingAttack |= (notAFile & kingBitBoard) << 1;
    
        kingAttack &= ~friendlyPieces;
        return (kingAttack);
    }
